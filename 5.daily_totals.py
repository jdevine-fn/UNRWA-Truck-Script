import os
import pandas as pd
import numpy as np
from datetime import datetime
import openpyxl
import platform

# =====================
# STEP 5: DAILY SUMMARY CALCULATIONS
# =====================

# Get the current date in the format YYYYMMDD (to match the folder created in steps 1-4)
current_date = datetime.now().strftime('%Y%m%d')

# Determine the user's desktop location (macOS and Windows compatibility)
if platform.system() == "Darwin":  # macOS
    desktop = os.path.join(os.path.expanduser("~"), "Desktop")
elif platform.system() == "Windows":  # Windows
    desktop = os.path.join(os.path.expanduser("~"), "Desktop")
else:
    raise Exception("Unsupported operating system. This script works on macOS and Windows only.")

# Path to the folder created by previous steps (same date-based folder)
folder_name = f"UNRWA Truck Data_{current_date}"
data_dir = os.path.join(desktop, folder_name)

# File path (input from step 4)
file_path = os.path.join(data_dir, "unrwa_trucks.xlsx")

# Load the data from the 'unrwa_trucks_kcal_mt' sheet generated by Script 4
data = pd.read_excel(file_path, sheet_name='unrwa_trucks_kcal_mt')

# Check for necessary columns
required_columns = ['date', 'truck_kcal', 'truck_type', 'sector', 'truck_food_mt', 'truck_weight_kg', 'ID']
for col in required_columns:
    if col not in data.columns:
        raise KeyError(f"The required column '{col}' does not exist in the dataset. Please check the data or previous processing steps.")

# Ensure 'date' column is of datetime type and extract date
data['date'] = pd.to_datetime(data['date']).dt.date

# Group data by date and compute sums and counts
data_daily = data.groupby('date').agg(
    total_trucks=('ID', 'count'),
    daily_kcal=('truck_kcal', 'sum'),
    daily_food_mt=('truck_food_mt', 'sum'),
    daily_mt_kg=('truck_weight_kg', 'sum')
).reset_index()

# Convert 'daily_mt_kg' from kg to metric tons
data_daily['daily_mt'] = data_daily['daily_mt_kg'] / 1000

# Drop 'daily_mt_kg' as it's no longer needed
data_daily.drop(columns='daily_mt_kg', inplace=True)

# Compute counts of trucks per truck_type
truck_type_counts = data.pivot_table(index='date', columns='truck_type', values='ID', aggfunc='count', fill_value=0)
truck_type_counts = truck_type_counts.rename(columns={
    'Food Truck': 'count_daily_truck_food',
    'Non-Food Truck': 'count_daily_truck_nonfood',
    'Mixed Food/Non-Food Truck': 'count_daily_truck_mixed'
}).reset_index()

# Merge truck type counts into data_daily
data_daily = pd.merge(data_daily, truck_type_counts, on='date', how='left')

# Compute counts of trucks per sector
sector_counts = data.pivot_table(index='date', columns='sector', values='ID', aggfunc='count', fill_value=0)
sector_counts = sector_counts.rename(columns={
    'humanitarian': 'count_daily_sector_humanitarian',
    'private': 'count_daily_sector_private',
    'unknown': 'count_daily_sector_unknown'
}).reset_index()

# Merge sector counts into data_daily
data_daily = pd.merge(data_daily, sector_counts, on='date', how='left')

# If 'Crossing' column exists, compute counts per crossing
if 'Crossing' in data.columns:
    crossing_counts = data.pivot_table(index='date', columns='Crossing', values='ID', aggfunc='count', fill_value=0)
    # Rename columns to meaningful names
    crossing_counts.columns = [f'entry_{col.lower()}_count' for col in crossing_counts.columns]
    crossing_counts = crossing_counts.reset_index()
    # Merge with data_daily
    data_daily = pd.merge(data_daily, crossing_counts, on='date', how='left')
else:
    print("Warning: The 'Crossing' column does not exist in the dataset. Skipping crossing-related calculations.")

# Classify cargo types based on 'truck_type'
def classify_cargo(truck_type):
    if truck_type == 'Food Truck':
        return 'food'
    elif truck_type == 'Non-Food Truck':
        return 'nonfood'
    elif truck_type == 'Mixed Food/Non-Food Truck':
        return 'mixed'
    else:
        return 'unknown'

data['cargo_type'] = data['truck_type'].apply(classify_cargo)

# Compute counts of cargo types per day
cargo_type_counts = data.pivot_table(index='date', columns='cargo_type', values='ID', aggfunc='count', fill_value=0)
cargo_type_counts = cargo_type_counts.rename(columns={
    'food': 'cargo_type_food_count',
    'nonfood': 'cargo_type_nonfood_count',
    'mixed': 'cargo_type_mixed_count',
    'unknown': 'cargo_type_unknown_count'
}).reset_index()

# Merge cargo type counts into data_daily
data_daily = pd.merge(data_daily, cargo_type_counts, on='date', how='left')

# Fill NaN values with zeros in count columns
count_columns = [col for col in data_daily.columns if 'count' in col]
data_daily[count_columns] = data_daily[count_columns].fillna(0).astype(int)

# Save `data_daily` with all columns in `unrwa_trucks.xlsx` as a new sheet `unrwa_daily_entries`
with pd.ExcelWriter(file_path, mode='a', engine='openpyxl', if_sheet_exists='replace') as writer:
    data_daily.to_excel(writer, sheet_name='unrwa_daily_entries', index=False)

print("Processing complete and data saved to 'unrwa_daily_entries' sheet.")
